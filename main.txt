package main

import (
	"github.com/gin-gonic/gin"
	"github.com/gosimple/slug"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
)

// Article is model
type Article struct {
	gorm.Model
	Title string
	Slug  string `gorm:"unique_index"`
	Desc  string `sql:"type:text;"`
}

// DB is for initialization Connection
var DB *gorm.DB

func main() {
	var err error

	// Setting Database MYSQL
	DB, err = gorm.Open("mysql", "root:@/learn_gin?charset=utf8&parseTime=True&loc=Local")

	if err != nil {
		panic("failed to connect database")

	}

	defer DB.Close()

	// Migrate the Database
	DB.AutoMigrate(&Article{})

	//  Setting Default Router
	router := gin.Default()

	// Verison Grouping
	apiV1 := router.Group("/api/v1/")
	{
		// Module Grouping
		articles := apiV1.Group("/article")
		{
			// Route initialization
			articles.GET("/", getHome)
			articles.GET("/:slug", getArticle)
			articles.POST("/", postArticle)
		}
		// Old Route initialization
		// apiV1.GET("/", getHome)
		// apiV1.GET("/article/:title", getArticle)
		// apiV1.POST("/articles", postArticle)
	}

	router.Run()
}

func getHome(c *gin.Context) {

	items := []Article{}
	DB.Find(&items)

	// Return JSON
	c.JSON(200, gin.H{
		"status":  "berhasil",
		"message": "Berhasil Akses Home",
		"data":    items,
	})
}

func getArticle(c *gin.Context) {

	// Get Parameter
	slug := c.Param("slug")

	var item Article

	if DB.First(&item, "slug =  ?", slug).RecordNotFound() {
		c.JSON(404, gin.H{
			"status":  "error",
			"message": "record not found"})
		c.Abort()
		return
	}

	c.JSON(200, gin.H{
		"status":  "berhasil",
		"message": slug,
	})
}

func postArticle(c *gin.Context) {
	// Get Form
	item := Article{
		Title: c.PostForm("title"),
		Desc:  c.PostForm("desc"),
		Slug:  slug.Make(c.PostForm("title")),
	}

	DB.Create(&item)

	c.JSON(200, gin.H{
		"status": "berhasil store data",
		"data":   item,
	})
}
